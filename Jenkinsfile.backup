pipeline {
    agent {
        kubernetes {
            label 'jenkins-agent'
            yaml """
apiVersion: v1
kind: Pod
metadata:
  labels:
    jenkins: agent
spec:
  containers:
  - name: docker
    image: docker:dind
    privileged: true
    volumeMounts:
    - name: docker-sock
      mountPath: /var/run/docker.sock
  - name: kubectl
    image: bitnami/kubectl:latest
    command:
    - cat
    tty: true
    volumeMounts:
    - name: kubeconfig
      mountPath: /root/.kube
  volumes:
  - name: docker-sock
    hostPath:
      path: /var/run/docker.sock
  - name: kubeconfig
    configMap:
      name: kubeconfig
"""
        }
    }

    environment {
        DOCKER_IMAGE = "model-testing"
        DOCKER_TAG = "${BUILD_NUMBER}"
        KUBE_NAMESPACE = "default"
        APP_NAME = "model-testing"
    }

    stages {
        stage('Checkout') {
            steps {
                echo 'Checking out source code...'
                checkout scm
            }
        }

        stage('Build Docker Image') {
            steps {
                container('docker') {
                    script {
                        echo "Building Docker image: ${DOCKER_IMAGE}:${DOCKER_TAG}"
                        sh """
                            docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} .
                            docker tag ${DOCKER_IMAGE}:${DOCKER_TAG} ${DOCKER_IMAGE}:latest
                        """
                    }
                }
            }
        }

        stage('Test Application') {
            steps {
                container('docker') {
                    script {
                        echo 'Running application tests...'
                        sh """
                            # Run basic container tests
                            docker run --rm ${DOCKER_IMAGE}:${DOCKER_TAG} python3 -c "import ollama, fastapi; print('Dependencies OK')"
                        """
                    }
                }
            }
        }

        stage('Load Image to Kind') {
            when {
                anyOf {
                    branch 'main'
                    branch 'master'
                    branch 'develop'
                }
            }
            steps {
                container('kubectl') {
                    script {
                        echo 'Loading image to kind cluster...'
                        sh """
                            # Load image to kind cluster
                            kind load docker-image ${DOCKER_IMAGE}:${DOCKER_TAG} --name model-testing || echo "Kind cluster not available, skipping..."
                            kind load docker-image ${DOCKER_IMAGE}:latest --name model-testing || echo "Kind cluster not available, skipping..."
                        """
                    }
                }
            }
        }

        stage('Update Deployment Manifest') {
            when {
                anyOf {
                    branch 'main'
                    branch 'master'
                }
            }
            steps {
                script {
                    echo 'Updating deployment manifest...'
                    sh """
                        # Update the image tag in deployment.yaml
                        sed -i 's|image: ${DOCKER_IMAGE}:.*|image: ${DOCKER_IMAGE}:${DOCKER_TAG}|g' deployment.yaml

                        # Show the updated deployment
                        cat deployment.yaml
                    """
                }
            }
        }

        stage('Deploy to Kubernetes') {
            when {
                anyOf {
                    branch 'main'
                    branch 'master'
                }
            }
            steps {
                container('kubectl') {
                    script {
                        echo 'Deploying to Kubernetes...'
                        sh """
                            # Apply the deployment and service
                            kubectl apply -f deployment.yaml
                            kubectl apply -f service.yaml

                            # Wait for rollout to complete
                            kubectl rollout status deployment/${APP_NAME}-deployment --timeout=300s

                            # Get deployment status
                            kubectl get deployment ${APP_NAME}-deployment
                            kubectl get pods -l app=${APP_NAME}
                            kubectl get service ${APP_NAME}-service
                        """
                    }
                }
            }
        }

        stage('Health Check') {
            when {
                anyOf {
                    branch 'main'
                    branch 'master'
                }
            }
            steps {
                container('kubectl') {
                    script {
                        echo 'Performing health check...'
                        sh """
                            # Wait for pods to be ready
                            kubectl wait --for=condition=ready pod -l app=${APP_NAME} --timeout=300s

                            # Port forward and test the service
                            kubectl port-forward service/${APP_NAME}-service 8080:80 &
                            sleep 5

                            # Test the API endpoint
                            curl -f "http://localhost:8080/docs" || echo "Health check failed"

                            # Kill port-forward
                            pkill -f "kubectl port-forward" || true
                        """
                    }
                }
            }
        }
    }

    post {
        always {
            echo 'Pipeline completed!'
            // Clean up
            sh 'docker system prune -f || true'
        }
        success {
            echo 'Pipeline succeeded! üéâ'
        }
        failure {
            echo 'Pipeline failed! ‚ùå'
        }
    }
}